[[./content/images/enriquekesslerm.png]]

* [[https://enriquekesslerm.com][enriquekesslerm.com]]
  [[file:assets/svg/gatsby-badge.svg]] [[file:assets/svg/react-badge.svg]] [[file:assets/svg/html5-badge.svg]] [[file:assets/svg/css3-badge.svg]] [[file:assets/svg/javascript-badge.svg]]

My personal web is officially out and running! 

The enriquekesslerm.com project started as a placeholder for learning Gatsby,
entangled in the [[https://github.com/Qkessler/100DaysOfGatsby][100 Days Of Gatsby]] experience. Built with Gatsby ‚Äîeasily
industry-accepted the best framework for lightning fast websites‚Äî, the site has
quickly become the place where I try to bring all of my ideas to be sure that I
keep myself learning, while creating a personal space.

Before starting with the breakdown, I find that it is important to give credit
where credit is due. I took a lot of inspiration on the following blogs when
designing the website, thank you so much!

- Lee Robinson's [[https://leerob.io][leerob.io]]
- Fran√ßois Best's [[https://francoisbest.com/][francoisbest.com]]

** Table of Contents :TOC_3:QUOTE:
#+BEGIN_QUOTE
- [[#enriquekesslermcom][enriquekesslerm.com]]
  - [[#why-gatsby][Why Gatsby?]]
  - [[#where-is-the-content-coming-from][Where is the content coming from?]]
  - [[#structure][Structure]]
  - [[#features][Features]]
    - [[#search-blog-posts][Search blog postsüîç]]
    - [[#categories-and-tags][Categories and tagsüìÅ]]
    - [[#travel-map][Travel mapüó∫]]
    - [[#moving-rainbow-text][Moving rainbow textüìõ]]
    - [[#rss][RSS]]
  - [[#running-the-site-locally][Running the site locally]]
  - [[#license][License]]
#+END_QUOTE

** Why [[https://www.gatsbyjs.com/][Gatsby]]?
    Gatsby is a React framework, so you will have to live with that it is built
    in JavaScript. On the other side, Gatsby compensates by pre-fetching data and
    caching all your website at build time. This means that the website will feel
    as crisp as a mobile app while having all the advantages that the web still
    offers, considering how young the mobile world is.

    [[./content/images/gatsby-index.png]]
   
    Gatsby provides extensive docs, and has a joyful community behind, trying to
    make the web better one step at a time. Without reinventing the wheel, you
    are able to access [[https://www.gatsbyjs.com/starters/][starters]], [[https://www.gatsbyjs.com/plugins][plugins]] and more.
   
    Considering the previous web-building experience that I had, drawing from
    some of the [[https://www.djangoproject.com/][Django]] knowledge was plenty to build the website/blog that
    I had been dreaming of.
** Where is the content coming from?
    Gatsby by default ‚Äîi.e. using the default starter‚Äî provides several CMS that
    you can connect to, namely Contentful, Ghost and more. I decided to go the
    more ‚Äú[[https://www.gnu.org/software/emacs/][emacsy]]‚Äù route, because

    #+begin_quote
    By experimenting with voluntary discomfort, we learn to appreciate far more of
    our life, and can be content with a much simpler and more wholesome one.
    #+end_quote
   
    Instead of going for Markdown files, being the hardcore Emacs user I am, I
    needed to find something to merge my love for Emacs and org-mode. The
    solution rested in the [[https://www.huxiaoxing.com/building-a-website-with-org-mode-files][Xiaoxing's orgajs starter]], which uses the =orgajs=
    package ‚Äîalso authored by him‚Äî parsing our org-mode files into beautiful and
    configurable websites, What could be better?

    Just to drive the point home, this is the magic of orgajs in play. The
    following is the heading of this post.

    #+begin_src 
   ,* PUBLISHED enriquekesslerm.com                       :web:software:personal:
 :PROPERTIES:
 :DATE: <2021-04-12 lun>
 :CATEGORY: Projects
 :SUMMARY: Personal web used to showcase myself and collect my writings and ideas in one spot.
 :IMAGE: ./content/images/danielle-macinnes-IuLgi9PWETU-unsplash.jpg
 :END:

 The enriquekesslerm.com project started as a placeholder for learning Gatsby,
 entangled in the [[file:content/100daysofgatsby-log.org][100 Days Of Gatsby]] experience. Built with Gatsby ‚Äîeasily
 industry-accepted the best framework for lightning fast websites‚Äî, the site has
    #+end_src

** Structure
    You can access the source code of this project ‚Äîlike any other of my
    projects‚Äî [[https://github.com/Qkessler/enriquekesslerm.com][here]], feel free to commit any changes or typos to help the cause.

    [[https://enriquekesslerm.com][enriquekesslerm.com]] follows the following structure

    #+begin_src bash
 .
 ‚îú‚îÄ‚îÄ assets
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ images
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ svg
 ‚îú‚îÄ‚îÄ content
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 100daysofgatsby-log.org
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ advanced.org
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ emacs-for-writers.org
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ getting-started.org
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ images
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ projects.org
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ standalong.org
 ‚îú‚îÄ‚îÄ gatsby-config.js
 ‚îú‚îÄ‚îÄ LICENSE
 ‚îú‚îÄ‚îÄ package.json
 ‚îú‚îÄ‚îÄ png2svg_black.sh
 ‚îú‚îÄ‚îÄ README.md
 ‚îú‚îÄ‚îÄ src
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ constants
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gastby-plugin-theme-ui
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gatsby-theme-blorg
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
 ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pages
 ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils
 ‚îî‚îÄ‚îÄ yarn.lock
    #+end_src

    As I'm using the [[https://yarnpkg.com/][yarn]] package manager, the yarn.lock file keeps all the
    versions of the packages that my page requires. Under the /content directory,
    I store all the org-mode files that compose my posts. Under /src, there are
    self developed components, but Gatsby's known concept as "Shadowing" is common.
    I shadow some of the configuration files for the plugins gatsby-plugin-theme-ui
    and gatsby-theme-blorg.

** Features
*** Search blog postsüîç
     Using [[http://elasticlunr.com/][elasticlunr]], which is an amazing light-weight self-hosted search
     engine, I'm able to implement the search engine for my blog posts. The
     package has configuration that needed to be done, as always on the
     =gatsby-config.js= file.

     #+begin_src javascript
     {
       resolve: `@gatsby-contrib/gatsby-plugin-elasticlunr-search`,
       options: {
         fields: [`title`, `tags`, `category`],
         // How to resolve each field`s value for a supported node type
         resolvers: {
           OrgPost: {
             title: (node) => node.title,
             tags: (node) => node.tags,
             excerpt: (node) => node.summary,
             slug: (node) => node.slug,
             date: (node) => {
               const date = node.date
               const moment = require("moment")
               return moment(date).add(-1, "d").format(`MMMM DD, YYYY`)
             },
             category: (node) => node.category,
           },
         },
       },
     },
     #+end_src

     If you are using Markdown (a.k.a the MarkdownRemark package) for your
     content, no additional configuration is needed, but I needed to configure
     the OrgPost graphql type.

     Elasticlunr uses the old component system based on state classes, but I
     imagine it could be implemented using the
     new [[https://twitter.com/quique_kessler/status/1384808605912862723?s=20][useState React Hook]]. Elasticlunr indexes the blog posts for the user
     when the /blog page starts, and it does so using the =getOrCreateIndex=
     function:

     #+begin_src javascript
     getOrCreateIndex = () =>
     this.index
       ? this.index
       : // Create an elastic lunr index and hydrate with graphql query results
         Index.load(this.props.searchIndex)
     #+end_src

     When the user's input changes, the =search= function is called, which
     queries the created index for the results according to the input, mapping
     the reference to the OrgPost Object.

     #+begin_src javascript
      search = (evt) => {
         const query = evt.target.value
         this.index = this.getOrCreateIndex()
         this.setState({
             query,
             // Query the index with search string to get an [] of IDs
             results: this.index
                .search(query, { expand: true })
                // Map over each ID and return the full document
                .map(({ ref }) => this.index.documentStore.getDoc(ref)),
         })
      }
     #+end_src

     The end result is pretty cool! I can search by 'title', 'tags' and 'category'.

     [[./content/images/search-enriquekesslerm.png]]

*** Categories and tagsüìÅ
     Each of the blog posts has additional metadata that can be added using either
     the headline of the org-file, or in the :PROPERTIES: drawer if the post is
     headline-based. Here are all the available options:

     | metadata field   | headline based               | file based           |
     |------------------+------------------------------+----------------------|
     | title            | headline content             | =#+TITLE=            |
     |                  | =EXPORT_TITLE=               |                      |
     |------------------+------------------------------+----------------------|
     | date             | =DATE=                       | =#+DATE=             |
     |                  | =EXPORT_DATE=                | =#+EXPORT_DATE=      |
     |                  | =PUBLISH_DATE=               | =#+PUBLISH_DATE=     |
     |                  | "CLOSED" planning timestamp  |                      |
     |------------------+------------------------------+----------------------|
     | category         | =CATEGORY=                   | =#+CATEGORY=         |
     |                  | file name                    |                      |
     |------------------+------------------------------+----------------------|
     | tags             | tags of headline             | =#+TAGS=             |
     |------------------+------------------------------+----------------------|
     | export_file_name | =EXPORT_FILE_NAME=           | =#+EXPORT_FILE_NAME= |
     |                  | headline content (sanitised) | file name            |
     |------------------+------------------------------+----------------------|
     | excerpt          | =EXCERPT=                    | =EXCERPT=            |
     |                  | =SUMMARY=                    | =SUMMARY=            |
     |                  | =DESCRIPTION=                | =DESCRIPTION=        |

     The category and tags are the one that I'm talking about as custom pages are
     created for each of them (dynamically when they are defined in the blog
     posts)

     [[./content/images/category-enriquekesslerm.png]]
     [[./content/images/tags-enriquekesslerm.png]]
    
*** Travel mapüó∫
    One of the ideas that I took from [[https://leerob.io][Lee's blog]] is to add a travel-map. I didn't
    really find that his using google-map was that interesting, so I searched for
    other ways, stumbling on react-leaflet.
   
    #+begin_quote
    Leaflet is the leading open-source JavaScript library for mobile-friendly
    interactive maps. Weighing just about 39 KB of JS, it has all the mapping
    features most developers ever need.

    Leaflet is designed with simplicity, performance and usability in mind. It works
    efficiently across all major desktop and mobile platforms, can be extended with
    lots of plugins, has a beautiful, easy to use and well-documented API and a
    simple, readable source code that is a joy to contribute to.
    #+end_quote
    ‚Äî[[https://leafletjs.com/][https://leafletjs.com/]]

    React-leaflet is the React package that uses the leaflet library to create custom
    components, pretty cool, huh?

    #+begin_src javascript
     if (typeof window !== "undefined") {
       return (
         <MapContainer
           center={center}
           zoom={zoom}
           style={{ width: "100%", height: "400px" }}
         >
           <TileLayer
             url="http://{s}.tile.osm.org/{z}/{x}/{y}.png"
             attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
           />
           {markers !== null &&
             markers.map((m, index) => (
               <Marker key={index} position={m.position}>
                 <Popup>{m.text}</Popup>
               </Marker>
             ))}
         </MapContainer>
       )
     }
     return null
    #+end_src

    Using that simple code I'm able to use a series of markers (which are stored in
    their own /constants file) and add them to the map, with their descriptions and
    custom CSS popups.

    [[./content/images/travelmap-enriquekesslerm.png]]

*** Moving rainbow textüìõ
    As part of the initial look that I wanted to infuse the website,
    one of the initial TODO's was adding a moving gradient text for
    my name on the index page.

    I adapted [[https://www.joshwcomeau.com/react/rainbow-button/][Josh Comeau's]] moving gradient button to work as the background
    for some text. The end result has pretty clean code and it works for
    most of the browsers ([[https://css-houdini.rocks/][CSS Houdini]] is still not fully supported).

    [[./content/images/gradient-name.gif]]



*** RSS
    As I'm a big advocate of RSS, I found that it needed to be included as one of
    the key features of the web-page. Using the [[https://www.gatsbyjs.com/plugins/gatsby-plugin-feed/][gatsby-plugin-feed]], the configuration
    was easy and quick.

    ‚ö† As a warning, the output file is only created on build, I had several hours of
    searching for problems to finally end up finding that it no longer builds the file
    on =gatsby develop=.

    #+begin_src javascript
     {
       resolve: `gatsby-plugin-feed`,
       options: {
         query: `
           {
             site {
               siteMetadata {
                 title
                 description
                 siteUrl
                 site_url: siteUrl
               }
             }
           }
         `,
         feeds: [
           {
             serialize: ({ query: { site, allOrgPost } }) => {
               return allOrgPost.nodes.map(post => {
                 return Object.assign({}, post, {
                   title: post.title,
                   date: post.date,
                   url: site.siteMetadata.siteUrl + post.slug,
                   guid: site.siteMetadata.siteUrl + post.slug,
                   custom_elements: [{ "content:encoded": post.html }],
                 })
               })
             },
             query: `
               {
                 allOrgPost(sort: {fields: date, order: DESC}) {
                    nodes {
                       title
                       excerpt
                       html
                       date(formatString: "MMMM DD, YYYY")
                       slug
                   }
                }
             }
             `,
             output: "/rss.xml",
             title: "Enrique Kessler Mart√≠nez's posts",
           },
         ],
       },
     }
    #+end_src

    As always, if you are using MarkdownRemark the configuration is even easier,
    with org-mode you require to add little configuration. An important part is
    the content-encoded html for my posts, without it there would be problems with
    the resulting =rss.xml= file.

    You can find the RSS file [[https://enriquekesslerm.com/rss.xml][here]].

    [[./content/images/rss-enriquekesslerm.png]]
** Running the site locally
   Just in case you want to try things out (remember to check the [[*License][LICENSE]]) follow the
   next steps to get up and running:

   #+begin_src shell
    git clone https://github.com/Qkessler/enriquekesslerm.com
    cd enriquekesslerm.com
    yarn install
    yarn develop
   #+end_src

   The website should be running at =localhost:8000= in your browser.
   
** License
   The website is copyrighted under the [[./LICENSE][MIT License]]. Feel free take inspiration,
   but please, avoid plagiarism.
